package com.kylemiles.mockdraftsjdbc.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;

import com.kylemiles.mockdraftsjdbc.dto.PlayerDTO;
import com.kylemiles.mockdraftsjdbc.entity.Player;
import com.kylemiles.mockdraftsjdbc.entity.Position;
import com.kylemiles.mockdraftsjdbc.entity.Year;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultPlayerDao implements PlayerDao {
	
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;

	@Override
	public List<Player> getPlayers() {

		log.info("Dao fetch Players");
		
		String sql = "SELECT * FROM player";
		
		
		return jdbcTemplate.query(sql, new RowMapper<>() {
			@Override
			public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
				
				return Player.builder()
						.playerPK(rs.getLong("player_pk"))
						.playerName(rs.getString("player_name"))
						.position(Position.valueOf(rs.getString("position")))
						.college(rs.getString("college"))
						.rank(rs.getInt("ovr_rank"))
						.year(rs.getString("class_year"))
						.build();
			}      
		});
	}

	@Override
	public PlayerDTO createPlayer(String playerName, Position position, String college, int rank, Year year) {
		log.info("Dao create Players");
		
		SqlParams sqlParams = new SqlParams();
		KeyHolder keyHolder = new GeneratedKeyHolder();
		
		sqlParams.sql = "INSERT INTO player "
				+ "(player_name, "
				+ "position, "
				+ "college, "
				+ "ovr_rank, "
				+ "class_year) "
				+ "VALUES (:player_name, :position, :college, :ovr_rank, :class_year)";	
		
		sqlParams.source.addValue("player_name", playerName);
		sqlParams.source.addValue("position", position.toString());
		sqlParams.source.addValue("college", college);
		sqlParams.source.addValue("ovr_rank", rank);
		sqlParams.source.addValue("class_year", year.ordinal()+1);
			
		jdbcTemplate.update(sqlParams.sql, sqlParams.source, keyHolder); {
			
				
		return PlayerDTO.builder()
				.playerPK(keyHolder.getKey().longValue())
				.playerName(playerName)
				.position(position)
				.college(college)
				.rank(rank)
				.year(year)
				.build();
		}
	}
	
	class SqlParams {
		String sql;
		MapSqlParameterSource source = new MapSqlParameterSource();
	}

	@Override
	public Player updatePlayer(Player updatedPlayer) {
		log.info("Dao update Players");
		String sql = "UPDATE player "
				+ "SET "
				+ "player_name = :player_name, "
				+ "position = :position, "
				+ "college = :college, "
				+ "ovr_rank = :ovr_rank, "
				+ "class_year = :class_year "
				+ "WHERE player_pk = :player_pk";
		
		Map <String, Object> params = new HashMap<>();
		params.put("player_name", updatedPlayer.getPlayerName());
		params.put("position", updatedPlayer.getPosition().toString());
		params.put("college", updatedPlayer.getCollege());
		params.put("ovr_rank", updatedPlayer.getRank());
		params.put("class_year", updatedPlayer.getYear());
		params.put("player_pk", updatedPlayer.getPlayerPK());

		
		if (jdbcTemplate.update(sql, params) == 0) {
			throw new NoSuchElementException("Update failed... player id: " + updatedPlayer.getPlayerPK() + " doesn't exist... ");
		}
		return Player.builder()
				.playerPK(updatedPlayer.getPlayerPK())
				.playerName(updatedPlayer.getPlayerName())
				.position(updatedPlayer.getPosition())
				.college(updatedPlayer.getCollege())
				.rank(updatedPlayer.getRank())
				.year(updatedPlayer.getYear())
				.build();
	}

	@Override
	public void deletePlayer(Long deleteId) {
		log.info("Dao delete Players");
		
		String sql = "DELETE FROM player "
				+ "WHERE player_pk = :player_pk";
		
		Map <String, Object> params = new HashMap<>();
		
		params.put("player_pk", deleteId);
		
		if (jdbcTemplate.update(sql, params) == 0) {
			throw new NoSuchElementException("Delete failed... player id: " + deleteId + " doesn't exist... ");
		} else {
			System.out.println("Player with id: " + deleteId + " was successfully deleted! ");
		}
		
	}
	
	@Override
	public PlayerDTO altUpdatePlayer(Long id, String playerName, Position position, String college, int rank, Year year) {
		log.info("Dao update Players");
		
		String sql = "UPDATE player "
				+ "SET "
				+ "player_name = :player_name, "
				+ "position = :position, "
				+ "college = :college, "
				+ "ovr_rank = :ovr_rank, "
				+ "class_year = :class_year "
				+ "WHERE player_pk = :player_pk";
		
		Map <String, Object> params = new HashMap<>();
		params.put("player_name", playerName);
		params.put("position", position.toString());
		params.put("college", college);
		params.put("ovr_rank", rank);
		params.put("class_year", year.ordinal()+1);
		params.put("player_pk", id);
		
		if (jdbcTemplate.update(sql, params) == 0) {
			throw new NoSuchElementException("Update failed... player id: " + id + " doesn't exist... ");
		}
		return PlayerDTO.builder()
				.playerPK(id)
				.playerName(playerName)
				.college(college)
				.rank(rank)
				.year(year)
				.build();
	}

	@Override
	public Player getPlayerById(Long id) {
		log.info("Dao fetch Players");
		
		String sql = "SELECT * FROM player "
				+ "WHERE player_pk = :player_pk";
		
		Map<String, Object> params = new HashMap<>();
		params.put("player_pk", id);
		
		return jdbcTemplate.query(sql, params, new PlayerResultSetExtractor());
	}
	
	public class PlayerResultSetExtractor implements ResultSetExtractor<Player> {

		@Override
		public Player extractData(ResultSet rs) throws SQLException, DataAccessException {
			rs.next();
			
			return Player.builder()
					.playerPK(rs.getLong("player_pk"))
					.playerName(rs.getString("player_name"))
					.position(Position.valueOf(rs.getString("position")))
					.college(rs.getString("college"))
					.rank(rs.getInt("ovr_rank"))
					.build();
		}
		
	}
	
	@Override
	public List<Player> getPlayersByPosition(Position position) {
		log.info("Dao fetch Players");
		
		String sql = "SELECT * FROM player "
				+ "WHERE position = :position";
		
		Map<String, Object> params = new HashMap<>();
		params.put("position", position.toString());
		
		
		return jdbcTemplate.query(sql, params, new RowMapper<>() {
			@Override
			public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
				
				return Player.builder()
						.playerPK(rs.getLong("player_pk"))
						.playerName(rs.getString("player_name"))
						.position(Position.valueOf(rs.getString("position")))
						.college(rs.getString("college"))
						.rank(rs.getInt("ovr_rank"))
						.build();
			}      
		});
	}

	@Override
	public List<Player> getPlayersByName(String name) {
		log.info("Dao fetch Players");
		
		String sql = "SELECT * FROM player "
				+ "WHERE player_name "
				+ "LIKE CONCAT('%', :player_name, '%')";
		
		Map<String, Object> params = new HashMap<>();
		params.put("player_name", name);
		
		
		return jdbcTemplate.query(sql, params, new RowMapper<>() {
			@Override
			public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
				
				return Player.builder()
						.playerPK(rs.getLong("player_pk"))
						.playerName(rs.getString("player_name"))
						.position(Position.valueOf(rs.getString("position")))
						.college(rs.getString("college"))
						.rank(rs.getInt("ovr_rank"))
						.build();
			}      
		});
	}

}

package com.kylemiles.mockdraftsjdbc.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;

import static org.springframework.security.config.Customizer.withDefaults;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter{
	
	@Autowired
	private DataSource datasource;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication()
			.dataSource(datasource)
			.usersByUsernameQuery("SELECT username, password, active "
					+ "FROM user "
					+ "WHERE username = ?")
			.authoritiesByUsernameQuery("SELECT username, roles "
					+ "FROM user "
					+ "WHERE username = ?");
		
		
	}
	@Autowired
	protected void configure(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf
                        .ignoringAntMatchers(
                                "/nfldraft/player/**"
                        , "/nfldraft/team/**"
                        , "/nfldraft/mock_draft/**"
                        , "/nfldraft/team_needs/**"
                        , "/nfldraft/user/**"))
                .cors(withDefaults())
                .authorizeHttpRequests(requests -> requests
                        .antMatchers(HttpMethod.GET
                        , "/nfldraft/user")
                        .hasAuthority("ROLE_ADMIN")
                        .antMatchers(HttpMethod.GET
                        , "/nfldraft/**")
                        .hasAuthority("ROLE_USER")
                        .antMatchers(HttpMethod.POST
                        , "/nfldraft/player/**"
                        , "/nfldraft/mock_draft/**"
                        , "/nfldraft/user/**")
                        .hasRole("ADMIN")
                        .antMatchers(HttpMethod.PUT
                        , "/nfldraft/player/**"
                        , "/nfldraft/team/**"
                        , "/nfldraft/mock_draft/**"
                        , "/nfldraft/team_needs/**")
                        .hasAuthority("ROLE_ADMIN")
                        .antMatchers(HttpMethod.DELETE
                        , "/nfldraft/player/**"
                        , "/nfldraft/mock_draft/**")
                        .hasAuthority("ROLE_ADMIN"))
                .formLogin(Customizer.withDefaults())
                .build();
	}

    @Bean
    PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

}

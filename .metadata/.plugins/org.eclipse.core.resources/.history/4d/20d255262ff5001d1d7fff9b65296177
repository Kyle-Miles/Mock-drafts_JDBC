package com.kylemiles.mockdraftsjdbc.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;

import com.kylemiles.mockdraftsjdbc.entity.Player;
import com.kylemiles.mockdraftsjdbc.entity.Position;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultPlayerDao implements PlayerDao {
	
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;

	@Override
	public List<Player> getPlayers() {

		log.info("Dao fetch Players");
		
		String sql = "SELECT * FROM player";
		
		
		return jdbcTemplate.query(sql, new RowMapper<>() {
			@Override
			public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
				
				return Player.builder()
						.playerPK(rs.getLong("player_pk"))
						.playerName(rs.getString("player_name"))
						.position(Position.valueOf(rs.getString("position")))
						.college(rs.getString("college"))
						.rank(rs.getInt("ovr_rank"))
						.build();
			}
		});
	}

	@Override
	public Player createPlayer(String playerName, Position position, String college, int rank) {
		log.info("Dao fetch Players");
		
		SqlParams sqlParams = new SqlParams();
		KeyHolder keyHolder = new GeneratedKeyHolder();
		
		sqlParams.sql = "INSERT INTO player "
				+ "(player_name, "
				+ "position, "
				+ "college, "
				+ "ovr_rank) "
				+ "VALUES (?,?,?,?)";
		
		sqlParams.source.addValue("player_name", playerName);
		sqlParams.source.addValue("position", position);
		sqlParams.source.addValue("college", college);
		sqlParams.source.addValue("ovr_rank", rank);
			
		jdbcTemplate.update(sqlParams.sql, sqlParams.source, keyHolder); {
			
				
		return Player.builder()
				.playerPK(keyHolder.getKey().longValue())
				.playerName(playerName)
				.position(position)
				.college(college)
				.rank(rank)
				.build();
			}
		});
	}
	
	class SqlParams {
		String sql;
		MapSqlParameterSource source = new MapSqlParameterSource();
	}

}

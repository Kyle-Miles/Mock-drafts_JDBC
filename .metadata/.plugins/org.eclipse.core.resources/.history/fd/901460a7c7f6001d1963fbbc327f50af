package com.kylemiles.mockdraftsjdbc.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;

import com.kylemiles.mockdraftsjdbc.dao.DefaultPlayerDao.SqlParams;
import com.kylemiles.mockdraftsjdbc.entity.Conference;
import com.kylemiles.mockdraftsjdbc.entity.Division;
import com.kylemiles.mockdraftsjdbc.entity.Draft;
import com.kylemiles.mockdraftsjdbc.entity.MockDraft;
import com.kylemiles.mockdraftsjdbc.entity.Needs;
import com.kylemiles.mockdraftsjdbc.entity.Pick;
import com.kylemiles.mockdraftsjdbc.entity.Player;
import com.kylemiles.mockdraftsjdbc.entity.Position;
import com.kylemiles.mockdraftsjdbc.entity.Round;
import com.kylemiles.mockdraftsjdbc.entity.Team;
import com.kylemiles.mockdraftsjdbc.entity.TeamName;
import com.kylemiles.mockdraftsjdbc.entity.TeamNeeds;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefaultMockDraftDao implements MockDraftDao {
	
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	private DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

	@Override
	public List<MockDraft> getMockDrafts() {
		log.info("Dao fetch Mock Draft");
		
		String sql = "SELECT * FROM mock_draft "
				+ "INNER JOIN team "
				+ "ON mock_draft.team_pk = team.team_pk "
				+ "INNER JOIN draft "
				+ "ON mock_draft.draft_pk = draft.draft_pk "
				+ "INNER JOIN player "
				+ "ON mock_draft.player_pk = player.player_pk";
		
		return jdbcTemplate.query(sql, new RowMapper<>() {
			@Override
			public MockDraft mapRow(ResultSet rs, int rowNum) throws SQLException {
				
				
				return MockDraft.builder()
						.mockDraftPK(rs.getLong("mock_draft_pk"))
						.published(LocalDateTime.parse(rs.getString("published"), format))
						.team(Team.builder()
								.teamPK(rs.getLong("team_pk"))
								.teamname(TeamName.valueOf(rs.getString("team_name")))
								.teamConference(Conference.valueOf(rs.getString("team_conference")))
								.teamDivision(Division.valueOf(rs.getString("team_division")))
								.build())
						.draft(Draft.builder()
								.draftPK(rs.getLong("draft_pk"))
								.round(Round.valueOf(rs.getString("round")))
								.pick(Pick.valueOf(rs.getString("pick")))
								.build())
						.player(Player.builder()
								.playerPK(rs.getLong("player_pk"))
								.playerName(rs.getString("player_name"))
								.position(Position.valueOf(rs.getString("position")))
								.college(rs.getString("college"))
								.rank(rs.getInt("ovr_rank"))
								.build())
						.build();
			}
		});
	}

	@Override
	public MockDraft createMockDraft(Long teamId, Long draftId, Long playerId) {
		log.info("Dao create Mock Draft");
		
		Team team = new Team(teamId);
		Draft draft = new Draft(draftId);
		Player player = new Player(playerId);
		
		SqlParams sqlParams = new SqlParams();
		KeyHolder keyHolder = new GeneratedKeyHolder();
		
		sqlParams.sql = "INSERT INTO mock_draft "
				+ "(team_pk, "
				+ "draft_pk, "
				+ "player_pk) "
				+ "SELECT (:team_pk, :draft_pk, :player_pk) "
				+ "FROM mock_draft "
				+ "INNER JOIN team "
				+ "ON team.team_pk = mock_draft.team_pk "
				+ "INNER JOIN draft "
				+ "ON draft.draft_pk = mock_draft.draft_pk "
				+ "INNER JOIN player "
				+ "ON player.player_pk = mock_draft.player_pk ";
		
		sqlParams.source.addValue("team_pk", teamId);
		sqlParams.source.addValue("draft_pk", draftId);
		sqlParams.source.addValue("player_pk", playerId);
		sqlParams.source.addValue("team_name", team.getTeamname());
		
		Team t = new Team(team.getTeamPK(), team.getTeamname(), team.getTeamConference(), team.getTeamDivision());
		Draft d = new Draft(draftId);
		Player p = new Player(playerId);
		
		
		
		
			
		jdbcTemplate.update(sqlParams.sql, sqlParams.source, keyHolder); {
		return MockDraft.builder()
				.mockDraftPK(keyHolder.getKey().longValue())
				.published(LocalDateTime.now())
				.team(Team.builder()
						.teamPK(teamId)
						.teamname(t.getTeamname())
						.build())
				.draft(Draft.builder()
						.draftPK(d.getDraftPK())
						.round(d.getRound())
						.pick(d.getPick())
						.build())
				.player(Player.builder()
						.playerPK(p.getPlayerPK())
						.playerName(p.getPlayerName())
						.position(p.getPosition())
						.college(p.getCollege())
						.rank(p.getRank())
						.build())
				.build();
		}
	}
	
	class SqlParams {
		String sql;
		MapSqlParameterSource source = new MapSqlParameterSource();
	}

}
